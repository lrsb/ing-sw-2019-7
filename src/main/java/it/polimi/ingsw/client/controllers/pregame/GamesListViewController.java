package it.polimi.ingsw.client.controllers.pregame;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import it.polimi.ingsw.Client;
import it.polimi.ingsw.client.controllers.base.BaseViewController;
import it.polimi.ingsw.client.controllers.base.NavigationController;
import it.polimi.ingsw.client.others.Preferences;
import it.polimi.ingsw.common.models.Room;
import it.polimi.ingsw.common.models.User;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.rmi.RemoteException;
import java.util.List;
import java.util.stream.Collectors;

public class GamesListViewController extends BaseViewController {
    private JPanel panel;
    private JButton ricaricaButton;
    private JTable table;
    private JButton joinButton;

    private List<Room> rooms;

    public GamesListViewController(@NotNull NavigationController navigationController) {
        super("Elenco partite", 800, 600, navigationController);
        setContentPane(panel);
        update();
        ricaricaButton.addActionListener(e -> update());
        table.getSelectionModel().addListSelectionListener(e -> Preferences.getTokenOrJumpBack(getNavigationController()).ifPresent(f -> {
            try {
                Client.API.joinRoom(f, rooms.get(table.getSelectedRow()).getUuid());
                //getNavigationController().presentViewController(RoomViewController.class, true);
            } catch (RemoteException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Problemi col server!!");
            }
        }));
    }

    private void update() {
        Preferences.getTokenOrJumpBack(getNavigationController()).ifPresent(e -> {
            try {
                var roomList = Client.API.getRooms(e);
                if (roomList == null) {
                    JOptionPane.showMessageDialog(null, "Problemi col server!!");
                    return;
                }
                rooms = roomList;
                refreshTable();
            } catch (RemoteException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Problemi col server!!");
            }
        });
    }

    private void refreshTable() {
        var tableModel = new DefaultTableModel();
        tableModel.addColumn("Nome");
        tableModel.addColumn("N. giocatori");
        rooms.stream().map(f -> new Object[]{f.getName(), f.getUsers().size() + "/5 ("
                + f.getUsers().stream().map(User::getNickname).collect(Collectors.joining(", ")) + ")"}).forEach(tableModel::addRow);
        table.setModel(tableModel);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel.add(scrollPane1, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table = new JTable();
        table.setAutoResizeMode(4);
        scrollPane1.setViewportView(table);
        final Spacer spacer1 = new Spacer();
        panel.add(spacer1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel.add(spacer2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        joinButton = new JButton();
        joinButton.setText("Entra");
        panel.add(joinButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ricaricaButton = new JButton();
        ricaricaButton.setText("Ricarica");
        panel.add(ricaricaButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(10, 10), null, 1, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}