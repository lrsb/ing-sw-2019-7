package it.polimi.ingsw.client.controllers.game;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.sun.javafx.collections.ObservableListWrapper;
import it.polimi.ingsw.client.Client;
import it.polimi.ingsw.client.controllers.base.BaseViewController;
import it.polimi.ingsw.client.controllers.base.NavigationController;
import it.polimi.ingsw.client.others.Preferences;
import it.polimi.ingsw.common.models.Message;
import it.polimi.ingsw.common.models.User;
import javafx.beans.InvalidationListener;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.UUID;

public class ChatViewController extends BaseViewController {
    public static final @NotNull ObservableListWrapper<Message> messages = new ObservableListWrapper<>(new ArrayList<>());

    private JPanel panel;
    private JButton sendButton;
    private JTextField messageField;
    private JTable messagesTable;

    private InvalidationListener listener;

    public ChatViewController(@Nullable NavigationController navigationController, @NotNull Object... args) {
        super("Chat", 600, 500, navigationController);
        setContentPane(panel);
        listener = o -> update((UUID) args[0]);
        listener.invalidated(null);
        messages.addListener(listener);
        sendButton.addActionListener(l -> {
            if (Preferences.getOptionalToken().isPresent()) {
                try {
                    Client.API.sendMessage(Preferences.getOptionalToken().get(), new Message(new User(""), (UUID) args[0], messageField.getText(), 0));
                    messageField.setText("");
                } catch (RemoteException e) {
                    e.printStackTrace();
                }
            } else dispose();
        });
    }

    @Override
    public void dispose() {
        messages.removeListener(listener);
        super.dispose();
    }

    private void update(UUID gameUuid) {
        var tableModel = new DefaultTableModel() {
            @Contract(pure = true)
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableModel.addColumn("Messaggio");
        tableModel.addColumn("Da");
        tableModel.addColumn("Alle");
        var formatter = new SimpleDateFormat("HH:mm:ss");
        messages.parallelStream()
                .filter(e -> e.getUuid().equals(gameUuid))
                .sorted().map(e -> new Object[]{e.getMessage(),
                Preferences.getUuid().equals(e.getFrom().getUuid()) ? "TE" : e.getFrom().getNickname(),
                formatter.format(new Date(e.getTimestamp()))})
                .forEachOrdered(tableModel::addRow);
        messagesTable.setModel(tableModel);
        messagesTable.scrollRectToVisible(messagesTable.getCellRect(messagesTable.getRowCount() - 1, 0, true));
        messagesTable.getColumnModel().getColumn(0).setPreferredWidth(400);
        messagesTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        messagesTable.getColumnModel().getColumn(2).setPreferredWidth(100);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        messageField = new JTextField();
        messageField.setToolTipText("Messaggio");
        panel1.add(messageField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        sendButton = new JButton();
        sendButton.setText("Invia");
        panel1.add(sendButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        messagesTable = new JTable();
        messagesTable.setAutoResizeMode(4);
        messagesTable.setCellSelectionEnabled(false);
        scrollPane1.setViewportView(messagesTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}